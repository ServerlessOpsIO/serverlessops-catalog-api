---
openapi: 3.0.3
info:
  title: serverlessops-catalog-api API
  description: ServerlessOps Catalog API for Backstage
  version: 1.0.0
servers:
  - url:
      Fn::Sub: "https://${Hostname}"
    description: Production endpoint
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: "all"

paths:
  "/health":
    get:
      summary: Health check
      description: Get health of endpoint
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
            default: application/json; charset=utf-8
      responses:
        '200':
          description: Success
      security:
        - serverlessOpsCognitoPool:
          - Fn::Sub: https://${Hostname}/health.read
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          "application/json": |
            {
              "statusCode": 200
            }
        responses:
          "200":
            statusCode: 200
            responseTemplates:
              "application/json": |
                {
                  "healthy": true
                }

  "/catalog":
    post:
      summary: Create catalog item
      description: Create catalog item
      parameters:
        - $ref: "#/components/parameters/headerContentTypeJson"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/backstage/backstage/refs/heads/master/plugins/catalog-backend/src/schema/openapi.yaml#/components/schemas/Entity"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties: {}
      security:
        - serverlessOpsCognitoPool:
          - Fn::Sub: https://${Hostname}/catalog.write
      x-amazon-apigateway-integration:
        type: AWS
        httpMethod: POST
        url:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/BatchWriteItem"
        credentials:
          Fn::Sub: ${RestApiIamRole.Arn}
        requestTemplates:
          "application/json":
            Fn::Sub: |
              #set($namespace = $input.path("$.metadata.namespace"))
              #set($kind = $input.path("$.kind"))
              #set($name = $input.path("$.metadata.names"))
              {
                "RequestItems": {
                  "${DdbTable}": [
                    {
                      "PutItemRequest": {
                        "Item": {
                          "pk": {
                            "S": "$namespace/$kind/$name"
                          },
                          "sk": {
                            "S": "$namespace/$kind/$name"
                          },
                          "itemType": {
                            "S": "entity"
                          },
                          "apiVersion": {
                            "S": "$input.path('$.apiVersion')"
                          },
                          "kind: {
                            "S": "$input.path('$.kind')"
                          },
                          "metadata": {
                            "M": $input.json('$.metadata')
                          },
                          "spec": {
                            "M": $input.json('$.spec')
                          }
                        }
                      }
                    }
                  ]
                }
              }
        responses:
          default:
            statusCode: 201
            responseTemplates:
              "application/json": |
                #set($inputRoot = $input.path("$"))
                {
                    "path": "",
                    "input": $input,
                    inputRoot: $inputRoot
                }


components:
  parameters:
    pathEntityId:
      name: entity_id
      in: path
      required: true
      description: Requested Entity ID
      schema:
        type: string
    headerContentTypeJson:
      name: Content-Type
      in: header
      schema:
        type: string
        default: application/json; charset=utf-8
  securitySchemes:
    serverlessOpsCognitoPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - Ref: CognitoUserPoolArn
        type: COGNITO_USER_POOLS
        identitySource: method.request.header.Authorization
        # Not sure why this breaks requests. Leaving this here as a note to not enable this
        # confoguration.
        #identityValidationExpression: "^Bearer [^\\s]+$"
