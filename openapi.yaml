---
openapi: 3.0.3
info:
  title: serverlessops-catalog-api API
  description: ServerlessOps Catalog API for Backstage
  version: 1.0.0
servers:
  - url:
      Fn::Sub: "https://${Hostname}"
    description: Production endpoint
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: "all"

paths:
  "/health":
    get:
      summary: Health check
      description: Get health of endpoint
      parameters:
        - $ref: "#/components/parameters/headerContentTypeJson"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
      security:
        - serverlessOpsCognitoPool:
          - Fn::Sub: https://${Hostname}/health.read
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          "application/json": |
            {
              "statusCode": 200
            }
        responses:
          "200":
            statusCode: 200
            responseTemplates:
              "application/json": |
                {
                  "healthy": true
                }

  "/catalog":
    post:
      summary: Create catalog item
      description: Create catalog item
      parameters:
        - $ref: "#/components/parameters/headerContentTypeJson"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiVersion:
                  type: string
                kind:
                  type: string
                metadata:
                  type: object
                  properties:
                    namespace:
                      type: string
                    name:
                      type: string
                    title:
                      type: string
                    annotations:
                      type: object
                  required:
                    - name
                  additionalProperties: true
                spec:
                  type: object
                  properties:
                    owner:
                      type: string
                    type:
                      type: string
              required:
                - apiVersion
                - kind
                - metadata
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyResponse"
        '400':
          description: Client failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '502':
          description: Unexpected upstream error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - serverlessOpsCognitoPool:
          - Fn::Sub: https://${Hostname}/catalog.write
      x-amazon-apigateway-integration:
        type: AWS
        httpMethod: POST
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/BatchWriteItem"
        credentials:
          Fn::Sub: ${RestApiIamRole.Arn}
        passthroughBehavior: NEVER
        requestTemplates:
          "application/json":
            # FIXME: This doesn't handle nessted maps and arrays.
            Fn::Sub: |
              #set ($root=$input.path('$'))
              #if ($root.namespace != '')
                #set($namespace = $root.metadata.namespace)
              #else
                #set($namespace = "default")
              #end
              #set($kind = $root.kind.toLowerCase())
              #set($name = $root.metadata.name)
              {
                "RequestItems": {
                  "${DdbTable}": [
                    {
                      "PutRequest": {
                        "Item": {
                          "pk": {
                            "S": "$namespace/$kind"
                          },
                          "sk": {
                            "S": "$namespace/$kind/$name"
                          },
                          "itemType": {
                            "S": "entity"
                          },
                          "apiVersion": {
                            "S": "$root.apiVersion"
                          },
                          "kind": {
                            "S": "$root.kind"
                          },
                          "metadata": {
                            "M": {
                            #foreach($pair in $root.metadata.entrySet())
                              #if( $pair.value.class.name == "java.lang.String" )
                                "$pair.key": {
                                  "S": "$pair.value"
                                }#if($foreach.hasNext),#end
                              #elseif( $pair.value.class.name == "net.minidev.json.JSONArray" )
                                "$pair.key": {
                                  "L": [
                                  #foreach($item in $pair.value)
                                    {
                                      "S": "$item"
                                    }
                                    #if($foreach.hasNext),#end
                                  #end
                                  ]
                                }#if($foreach.hasNext),#end
                              #elseif( $pair.value.class.name == "java.util.LinkedHashMap" )
                                "$pair.key": {
                                  "M": {
                                  #foreach($subpair in $pair.value.entrySet())
                                    "$subpair.key": {
                                      "S": "$subpair.value"
                                    }#if($foreach.hasNext),#end
                                  #end
                                  }
                                }#if($foreach.hasNext),#end
                              #end
                            #end
                            }
                          },
                          "spec": {
                            "M": {
                            #foreach($pair in $root.spec.entrySet())
                              #if( $pair.value.class.name == "java.lang.String" )
                                "$pair.key": {
                                  "S": "$pair.value"
                                }#if($foreach.hasNext),#end
                              #elseif( $pair.value.class.name == "net.minidev.json.JSONArray" )
                                "$pair.key": {
                                  "L": [
                                  #foreach($item in $pair.value)
                                    {
                                      "S": "$item"
                                    }
                                    #if($foreach.hasNext),#end
                                  #end
                                  ]
                                }#if($foreach.hasNext),#end
                              #elseif( $pair.value.class.name == "java.util.LinkedHashMap" )
                                "$pair.key": {
                                  "M": {
                                  #foreach($subpair in $pair.value.entrySet())
                                    "$subpair.key": {
                                      "S": "$subpair.value"
                                    }#if($foreach.hasNext),#end
                                  #end
                                  }
                                }#if($foreach.hasNext),#end
                              #end
                            #end
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
        responses:
          "2\\d{2}":
            statusCode: 201
            responseTemplates:
              "application/json": |
                {}
          "4\\d{2}":
            statusCode: 400
            responseTemplates:
              "application/json": |
                {
                  "message": "$input.path('$.Message')"
                }
          "5\\d{2}":
            statusCode: 500
            responseTemplates:
              "application/json": |
                {
                  "message": "$input.path('$.Message')"
                }
          default:
            statusCode: 502
            responseTemplates:
              "application/json": |
                {
                  "message": "$input.path('$.Message')"
                }

  "/catalog/{namespace}/{kind}":
    get:
      summary: List catalog items
      description: List catalog items
      parameters:
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/kind"
        - name: limit
          in: query
          required: false
          description: Maximum number of items to return
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          required: false
          description: Offset to start from
          schema:
            type: integer
            default: 0
        - $ref: "#/components/parameters/headerContentTypeJson"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Client failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '502':
          description: Unexpected upstream error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - serverlessOpsCognitoPool:
          - Fn::Sub: https://${Hostname}/catalog.read
      x-amazon-apigateway-integration:
        type: AWS
        httpMethod: POST
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
        credentials:
          Fn::Sub: ${RestApiIamRole.Arn}
        passthroughBehavior: NEVER
        requestTemplates:
          "application/json":
            Fn::Sub: |
              {
                "TableName": "${DdbTable}",
                "KeyConditionExpression": "#pk = :pk",
                "ExpressionAttributeValues": {
                  ":pk": { "S": "$input.params('namespace')/$input.params('kind')" },
                  ":itemType": { "S": "entity" }
                },
                "ExpressionAttributeNames": {
                  "#pk": "pk",
                  "#itemType": "itemType"
                },
                "FilterExpression": "#itemType = :itemType"
              }
        responses:
          "2\\d{2}":
            statusCode: 200
            responseTemplates:
              "application/json": |
                $input.json('$')
          "4\\d{2}":
            statusCode: 400
            responseTemplates:
              "application/json": |
                {
                  "message": "$input.path('$.Message')"
                }
          "5\\d{2}":
            statusCode: 500
            responseTemplates:
              "application/json": |
                {
                  "message": "$input.path('$.Message')"
                }
          default:
            statusCode: 502
            responseTemplates:
              "application/json": |
                {
                  "message": "$input.path('$.Message')"
                }

  "/catalog/{namespace}/{kind}/{name}":
    get:
      summary: Get catalog item
      description: Get catalog item
      parameters:
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/kind"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/headerContentTypeJson"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Client failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '502':
          description: Unexpected upstream error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - serverlessOpsCognitoPool:
          - Fn::Sub: https://${Hostname}/catalog.read
      x-amazon-apigateway-integration:
        type: AWS
        httpMethod: POST
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"
        credentials:
          Fn::Sub: ${RestApiIamRole.Arn}
        passthroughBehavior: NEVER
        requestTemplates:
          "application/json":
            Fn::Sub: |
              {
                "TableName": "${DdbTable}",
                "Key": {
                  "pk": {
                    "S": "$input.params('namespace')/$input.params('kind')"
                  },
                  "sk": {
                    "S": "$input.params('namespace')/$input.params('kind')/$input.params('name')"
                  }
                }
              }
        responses:
          "2\\d{2}":
            statusCode: 200
            responseTemplates:
              "application/json": |
                $input.json('$.Item')
          "4\\d{2}":
            statusCode: 400
            responseTemplates:
              "application/json": |
                {
                  "message": "$input.path('$.Message')"
                }
          "5\\d{2}":
            statusCode: 500
            responseTemplates:
              "application/json": |
                {
                  "message": "$input.path('$.Message')"
                }
          default:
            statusCode: 502
            responseTemplates:
              "application/json": |
                {
                  "message": "$input.path('$.Message')"
                }
components:
  schemas:
    EmptyResponse:
      type: object
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    HealthCheckResponse:
      type: object
      properties:
        healthy:
          type: boolean
      required:
        - healthy
  parameters:
    namespace:
      name: namespace
      in: path
      required: true
      description: Requested Entity namespace
      schema:
        type: string
    kind:
      name: kind
      in: path
      required: true
      description: Requested Entity kind
      schema:
        type: string
    name:
      name: name
      in: path
      required: true
      description: Requested Entity name
      schema:
        type: string
    headerContentTypeJson:
      name: Content-Type
      in: header
      schema:
        type: string
        default: application/json; charset=utf-8
  securitySchemes:
    serverlessOpsCognitoPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - Ref: CognitoUserPoolArn
        type: COGNITO_USER_POOLS
        identitySource: method.request.header.Authorization
        # Not sure why this breaks requests. Leaving this here as a note to not enable this
        # confoguration.
        #identityValidationExpression: "^Bearer [^\\s]+$"
